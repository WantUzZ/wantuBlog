I"N<h2 id="前言">前言</h2>
<p>   图是一种常见的数据结构，其反映数据所对应元素之间的几何关系和拓扑关系。图数据库是一种非关系型数据库。它应用图形理论存储实体之间的关系信息。最常见例子就是社会网络中人与人之间的关系。关系型数据库用于存储“关系型”数据的效果并不好，其查询复杂、缓慢、超出预期，而图形数据库的独特设计恰恰弥补了这个缺陷。<br />
   Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。Neo4j也可以被看作是一个高性能的图引擎，该引擎具有成熟数据库的所有特性。程序员工作在一个面向对象的、灵活的网络结构下而不是严格、静态的表中——但是他们可以享受到具备完全的事务特性、企业级的数据库的所有好处。<br />
  cypher是用于neo4j的查询语言。<br />
  本文仅对工作中的使用点进行总结，后期会继续更新。可能有些地方有些偏颇。请见谅。<br />
  ⚠️⚠️⚠️社区版免费，企业版收费。并且企业版费用不低。<a href="http://neo4j.com.cn/topic/59b0a3f59fe13f5e0a2212b2">价格参考表</a>。<br /></p>
<h2 id="正文">正文</h2>
<h4 id="crud">CRUD</h4>
<p><strong>增</strong><br />
<code class="highlighter-rouge">节点：</code><br />
    create (n:xxx{att:value}) //单节点<br />
    create (n),(m);//多节点，注意创建多节点的时候自定义变量(前面的n、m是用于捕获结果)不能重复,即create (n),(n);是会报错的。<br />
    create (n:label1:lable2:label3) //带标签的节点。标签可以用来创建索引，从而有助于优化对节点的查询。标签的命名规则：数字、字母、下划线，首字母不能是数字。<br />
    create (n:xxx{att1:value1})//创建带属性的节点。<br />
<code class="highlighter-rouge">关系：</code><br />
    create：<br />
        create (n1:xx)-[r:xxx]-&gt;(n2:x) //创建单关系<br />
        create (n1:xx)-[r:xxx]-&gt;(n2:x),(n11:xx)-[r1:xxx]-&gt;(n22:x)//创建多关系<br />
        create ()-[r:xx{att:value}]-()//创建带属性的关系<br />
        create k = (n1)-[r1:friend{location:’China’}]-&gt;(n2) return k //创建具有节点和联系的全路径<br />
    create unique:<br />
        match (n)-[r]-(n1) <br />
        where n.id = xx<br />
        create unique (n)-[r1]-(n2:{name:’want’}) <br />
        return n,r,n1,n2 //创建唯一的节点和联系。create unique语句，这个语句放在match和create这里，对于match上的节点和关系会新建缺省元素。<br />
    merge:<br />
        megre (n:xxx{att:value}) Merge好似if-else语句，基本逻辑是先检测merge后面的条件，看看有没有匹配的返回值，如果有则执行on merge分支，如果没有则走on create。<br />
    create unique与merge区别：Create Unique部分匹配就可以，而Merge则只有整个模式都匹配才创建，否则什么也不做。<br />
<strong>改</strong><br />
<code class="highlighter-rouge">更新属性值:</code>&lt;br
    match (n:xxx{att:value}) set n.att = newValue return n<br />
    除了create 和 delete 以外其他语句都必须要以return结尾<br />
<code class="highlighter-rouge">更新标签:</code><br />
    match (n:lable1:label2) set n:newLabel1:newLabel2 return n;<br />
<code class="highlighter-rouge">更改关系:</code><br />
    先删除旧的关系，再建立新的关系。<br />
<strong>删</strong><br />
<code class="highlighter-rouge">delete:</code><br />
    不建议使用match (n) delete n （强保护机制，必要要先删除关系再删除节点）<br />
    而是使用：match (n) detach delete n (弱保护机制)<br />
<code class="highlighter-rouge">remove:专门删除属性、标签</code><br />
    match (n:xxx{att:value}) remove n.att return n;//删除节点的某一个属性<br />
    match (n) remove n:label//删除某一个标签，注意如果标签有约束，需要先删除约束：DROP CONSTRAINT ON (p:lable) ASSERT p.id IS UNIQUE<br />
    match (n) where n.id = xxx set n.att = null;//将某个属性设置为null也是删除属性的一种方法。<br />
<strong>查</strong><br />
<code class="highlighter-rouge">match(查询)...where:</code><br />
    在match之前可以进行定位用以加快查询速度。<br />
    常见聚合操作：count、distinct、max、min…<br /></p>
:ET