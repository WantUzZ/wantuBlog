<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>want</title>
    <description>关于程序与设计、黑客与画家 | 王涛，Web &amp; Mobile Lover，Software Engineer，UX Designer | 这里是 @want王涛 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 17 Oct 2018 18:43:11 +0800</pubDate>
    <lastBuildDate>Wed, 17 Oct 2018 18:43:11 +0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>回顾ElasticSearch的使用(持续更新...)</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;h3 id=&quot;es背景故事&quot;&gt;es背景故事&lt;/h3&gt;
&lt;p&gt;  多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。
在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。
直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。
后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。
然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。&lt;br /&gt;
  第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。
一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。&lt;br /&gt;
  Shay的妻子依旧等待着她的食谱搜索……&lt;/p&gt;
&lt;h3 id=&quot;基础知识&quot;&gt;基础知识：&lt;/h3&gt;
&lt;p&gt;1、es本质上是一个分布式文档(document)数据库，允许多台机器协同工作，每台机器可以运行多个es实例。单个es实例称之为节点。一组节点构成一个集群。&lt;br /&gt;
2、index:type = 1:n type:document = 1:n 但是6.x版本只允许每个index包含一个Type。&lt;br /&gt;
3、因为单节点（硬件限制）不可能存储太大的数据量，es提供了将index（一组document的集合）划分为分片的功能。分片数据只是整个index数据的一部分。&lt;br /&gt;
4、index 分片 复制分片关系：index划分为多个分片每个分片占整个数据的1/n，index一旦复制就会有复制分片。&lt;br /&gt;
主分片的数量只能在创建的时候指定后期不能修改，复制分片的数量是支持后期修改的&lt;br /&gt;
5、默认情况下es会为每一个index分配5个主分片和一个副本（5个复制分片）。同一份shard是不会在一个节点中保存的(容灾、提高查询性能考量)。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;h3 id=&quot;相关问题&quot;&gt;相关问题&lt;/h3&gt;
&lt;h4 id=&quot;为啥主分片的数量后期无法修改&quot;&gt;为啥主分片的数量后期无法修改？&lt;/h4&gt;

&lt;h4 id=&quot;脑裂问题&quot;&gt;脑裂问题&lt;/h4&gt;
</description>
        <pubDate>Wed, 17 Oct 2018 02:43:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/17/elasticSearchQuery/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/17/elasticSearchQuery/</guid>
        
        <category>ElasticSearch</category>
        
        <category>搜索</category>
        
        <category>数据分析</category>
        
        
      </item>
    
      <item>
        <title>书摘</title>
        <description>&lt;h2 id=&quot;书摘&quot;&gt;书摘&lt;/h2&gt;

&lt;h3 id=&quot;激荡四十年-中国企业1978-2018&quot;&gt;激荡四十年 中国企业1978-2018&lt;/h3&gt;

&lt;h4 id=&quot;节选&quot;&gt;节选&lt;/h4&gt;

&lt;p&gt;  我们的国家就是一艘驶往未来的大船，途经无数险阻、渡口，很难有人可以至始至终随行到终点，
每一代人离去之时，均心怀不甘和不舍，而下一代人则感念前辈却又注定反叛。&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Oct 2018 02:43:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/17/bookSummary/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/17/bookSummary/</guid>
        
        <category>小说</category>
        
        
      </item>
    
      <item>
        <title>个人已知的一些mysql查询性能优化</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;直奔正文&lt;/a&gt; 
&lt;br /&gt;
  到店达之后一开始接到了大量的导数的数据需求。还记得当时有一个需求是从数据库中拉每周的周报数据（财务）。那个SQL写的非常的大而且开始的时候执行的速度很慢，差点就逼近了赤狐系统的临界执行时长。
因为一开始没想去用程序处理，也只是想把需求先搞出来。后面数据慢慢稳定。于是想把整个查询进行一些优化。
&lt;br /&gt;
  以下就是对于mysql查询性能优化的一些心得（无查询缓存情况下）。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;  先大致了解一下mysql的架构设计和查询执行路径。&lt;br /&gt;
mysql的逻辑架构分为三层。最上层大多数是基于网络的客户端。第二层是mysql的核心，mysql的核心服务功能都在此层，包括查询解析、分析、优化、缓存以及所有的内置函数。第三层则是存储引擎，引擎的职责是负责mysql中数据的存储和提取。各个引擎各有所长。服务器通过API与存储引擎进行通信。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查询慢可能的原因&quot;&gt;查询慢可能的原因：&lt;/h3&gt;
&lt;p&gt;1.计算能力不足&lt;br /&gt;
2.设计表存在问题&lt;br /&gt;
3.建表时并没有建立高效的索引&lt;br /&gt;
4.SQL语句有提高的空间(避免返回不需要的数据)&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解决办法&quot;&gt;解决办法：&lt;/h3&gt;
&lt;p&gt;1.如果数据体量比较大，mysql处理起来比较费力，可以考虑一些分布式计算框架。&lt;br /&gt;
2.如果一个表的基础数据量就已经够大了并且伴随较大的增量数据，可以考虑分表（按时间分等策略…）&lt;br /&gt;
3.索引，建立高性能的索引策略。（下面会细讲）&lt;br /&gt;
4.优化自己的SQL语句&lt;br /&gt;
5.基础数据预处理（中间表）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;抛开数据量一上来就建索引就是耍流氓，因为mysql自身维护它也是需要消耗资源的，小表全表扫描简单粗暴又高效，超大型的表也不适合，索引的代价太高可用考虑分区技术。中到大型表，嘿嘿嘿，就是你了。
在innodb引擎使用的是B+tree索引,基于B-tree对索引列是顺序组织存储的缘故，所以很适合查找范围数据。&lt;/p&gt;
&lt;h4 id=&quot;创建高性能的索引&quot;&gt;创建高性能的索引：&lt;/h4&gt;
&lt;p&gt;1.查询中列不是独立的&lt;br /&gt;
独立的列指的是索引列不能是表达式的一部分，也不能是函数的参数。
select stu.name from stu where stu.id + 1 = 5.即使你在stu(前提：stu表中的id不是主键)的id建了索引，并没有什么用。&lt;br /&gt;
   2.前缀索引&lt;br /&gt;
有的时候需要索引很长的字符，这会导致索引变得大且慢，可以考虑索引开始的部分字符，此举可大大节约索引空间，从而提高索引效率，但也会导致另一索引选择性降低。（索引选择性 = 不重复的索引值/表的记录总数）
如何确定前缀索引的长度？&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colu_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colu_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以得到某个列最频繁出现的前10个值，记录下来这10个值得范围作为标准。&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colu_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;通过不断的调整上面n的值(前缀索引的长度)得到的范围值是接近标准中的最小的数值。
打个比方，当n=7时得到的范围值就已经很接近标准了，但是n=8的时候比7更接近但时范围差距很小，那么n=7较为合适。
创建前缀索引：&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colu_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_index_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_index_length&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;最佳前缀索引长度&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3.多列索引&lt;br /&gt;
如果在用explain查看SQL的执行计划中有发现有索引合并（type值为index_merge）的时候应该好好检查一下查询和表的结构。
a、当表中的多个单独的索引列做相交操作时(通常有多个AND条件)，通常需要一个包含所有相关列的所列索引而不是多个独立的单列索引。&lt;br /&gt;
   4.选择合适的索引顺序&lt;br /&gt;
通常做法：将选择性高的列放到索引最前列&lt;br /&gt;
   5.聚簇索引&lt;br /&gt;
   6.删除未使用的索引和冗余的索引&lt;br /&gt;
   这些索引是累赘，可以通过一些工具帮忙定位后删除。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;通俗做法&quot;&gt;通俗做法&lt;/h4&gt;
&lt;p&gt;1.看where子句哪些列出现比较频繁。给那些频繁的列（主要）、有更多不同值（次要）的列建上索引。(次要做法的目的是高效的过滤掉不要的行)&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;优化sql&quot;&gt;优化sql&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'this_is_my_best_student_score'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teacher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%王%'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%keyword%'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;这种是不会走索引&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先得知道整个SQL的执行顺序：&lt;br /&gt;
from -&amp;gt; where -&amp;gt; group by -&amp;gt;having -&amp;gt;select -&amp;gt; order by -&amp;gt; limit&lt;br /&gt;
from过程中如果使用的是自然连接那么会导致产生一张笛卡尔积的虚拟表，这样做是很蠢的。推荐使用外连接(会减少虚拟表的数据量)。&lt;br /&gt;
where 对虚拟表中的数据进行过滤，能放在这里的过滤别放having中进行过滤&lt;br /&gt;
group by&lt;br /&gt;
having 主要就是聚合函数结果进行过滤&lt;br /&gt;
select 只要自己要的数据！不需要的字段一个不要。&lt;br /&gt;
order by &lt;br /&gt;
limit &lt;br /&gt;
此外上面这个sql中的like可以替成一些方法：locate、position、instr等&lt;/p&gt;

&lt;h4 id=&quot;基础数据预处理&quot;&gt;基础数据预处理&lt;/h4&gt;
&lt;p&gt;针对业务上的一些统计数据，可以将数据按日统计好在放入一张中间表中，之后将相关的定时任务脚本部署好，每日进行统计数据的增量更新。此举会明显加快系统的相应时间。增量更新与全量更新相结合更能保证数据的可靠性。&lt;/p&gt;

&lt;h4 id=&quot;读写分离定期同步&quot;&gt;读写分离，定期同步。&lt;/h4&gt;
&lt;p&gt;主库写从库读，定期同步数据。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;  这应该是我所知道的关于SQL查询优化的所有技能了。&lt;br /&gt;
mysql是有查询优化器帮忙优化，但是正如卓哥（店达架构师）说的一样：一定要有写高性能的sql语句的意识。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;再补充几点：&lt;br /&gt;
1、不要想把所有的事情都交给mysql交给SQL。SQL语句整个执行是一个黑盒。我们没有办法去debug看看具体的数据流。&lt;br /&gt;
一个较为恰当的做法就是粗加工基础数据，再把这些数据用程序来进行相关的计算。这样即便是有问题，我们也可以轻松的定位问题。&lt;br /&gt;
2、个人心得：SQL书写的准确性不是难在语法，而是业务上的。我们需要对用到的每张表有所认知。知道每张表的细粒度。&lt;br /&gt;
也就是这样，我们才会对各种连接查询之后的那个虚拟的表的数据结构有一个清楚的认识。也就是这样才能保证我们的数据是正确的。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;后期还会更新一些东西，今晚要休息了。&lt;br /&gt;
转载请注明出处。&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Oct 2018 23:06:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/13/myql/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/13/myql/</guid>
        
        <category>mysql</category>
        
        
      </item>
    
      <item>
        <title>Hello world</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“10000km”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;want 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt; 
这个博客网站是基于Jekyll+GitHub Pages搭建而成的。
主要是为了记录自己的生活、工作、学习的事情。之前一直使用为之笔记进行总结。
加法要做减法也要做，笔记中的一些有趣的知识希望在博客中进行分享。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的步骤。（OSX）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1、安装ruby环境
    brew install ruby

2、安装一些其他的软件
    gem install jekyll

    gem install bundler

    gem install jekyll-paginate

    gem install jekyll-gist

3、从GitHub找一个模板项目并进行启动
    git clone https://github.com/Huxpro/huxpro.github.io.git
    检出来之后启动cd到项目目录中
    jekyll server

4、调整项目布局（个人行为）

5、购买域名，并将域名解析到自己的userName.github.io上

6、github page同样也要绑定到自己购买的域名上

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;具体搭建过程请参照&lt;a href=&quot;https://my.oschina.net/u/1027043/blog/1794382&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Oct 2018 02:43:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/11/hello-world/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/11/hello-world/</guid>
        
        <category>jekyll+github page</category>
        
        
      </item>
    
  </channel>
</rss>
