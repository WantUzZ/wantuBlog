<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>want</title>
    <description>关于程序与设计、黑客与画家 | 王涛，Web &amp; Mobile Lover，Software Engineer，UX Designer | 这里是 @want王涛 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Nov 2019 22:37:08 +0800</pubDate>
    <lastBuildDate>Wed, 27 Nov 2019 22:37:08 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>HTTP协议</title>
        <description>
</description>
        <pubDate>Thu, 21 Nov 2019 06:09:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/21/HTTP/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/21/HTTP/</guid>
        
        <category>HTTP</category>
        
        <category>计算机网络</category>
        
        
      </item>
    
      <item>
        <title>对称加密-AES</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  最近宇哥排查到了一个很匪夷所思的事情。部分小程序接口请求某个接口但是响应莫名其妙被置为空。后面排查到是被 TX 给劫持了，具体被劫持的原因，那次请求中有一个 url(指向七牛云上的图片资源)，应该 TX 拿到了那个资源并且识别到了图片上的“京东”这两个字眼，然后就发生了之后的事情。心疼我东哥 1 东(1 东===2min)。后面宇哥就交代了我们这边的接口提供方要求对数据进行加密。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;处理思路&quot;&gt;处理思路&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt; &lt;br /&gt;
  1、对数据进行加密&lt;br /&gt;
  2、加密过程不要太过复杂&lt;br /&gt;
  3、对接口响应时间不会造成太大的影响（避免响应时间大幅度增加）&lt;br /&gt;
  4、灵活配置&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;着手&lt;/strong&gt; &lt;br /&gt;
  1、首先确定加密方向。因为不能太过复杂，所以最好采用对称加密。个人觉得有必要像组合加密机制那样先用非对称加密加密对称加密的密钥（撇开中间人攻击），但是后面是采用在前后端都维护一个密钥数组。&lt;br /&gt;
  2、选中对称加密，对称加密算法选择，Aes 是典型的加密算法。而且 node 核心模块 crypto 也支持。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现&lt;/strong&gt; &lt;br /&gt;
  1、打算在服务器端和客户端这边维护一些密钥数组和加密向量数组为的是稍微提高些安全性。&lt;br /&gt;
  2、加密密钥和加密向量的定位值不应该是明文。采用位运算对实际下标值进行某种位运算进行偏移。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * @Descripttion: aes加密测试
 * @version:1.0
 * @Author: want
 * @Date: 2019-08-09 10:44:25
 * @LastEditors: want
 * @LastEditTime: 2019-08-12 09:33:01
 */&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 加密方法
 * @param {String}      加密key
 * @param {String}       向量
 * @param {String}      需要加密的数据
 * @returns string 密文
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCipheriv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aes-128-cbc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @name: 解密方法
 * @msg: 对密文进行解密
 * @param {String}  解密算法
 * @param {String}   解密向量
 * @param {String} 密文
 * @return: 解密后的数据
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDecipheriv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aes-128-cbc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(IJf621ea5c0ok8j&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`key:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;02kk950004598718&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`iv:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;want dddd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;数据加密后:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;数据解密后:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * k: ['751f621ea5c8f930','751f621ea5c0ok8j','@#$898js8.9ksj8j']
 *
 * iv:['2624750004598718','02kk950004598718','9s82,.9#$%hjjHJF']
 *
 */&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;困惑&lt;/strong&gt; &lt;br /&gt;
  1、加密向量感觉很废。
  2、加密向量为啥长度有要求，为啥是 16 位？&lt;/p&gt;

&lt;h4 id=&quot;aes-细细讲来&quot;&gt;Aes 细细讲来&lt;/h4&gt;

&lt;p&gt;高级加密标准（Advanced Encryption Standard: AES）是美国国家标准与技术研究院（NIST）在 2001 年建立了电子数据的加密规范。其是对称加解密算法的最经典算法之一，它是一种分组加密标准，每个加密块大小为 128 位，允许的密钥长度为 128、192 和 256 位。&lt;br /&gt;&lt;/p&gt;

&lt;!-- 这里只介绍 ECB、CBC、CFB 和 OFB 四种加密模式。 --&gt;

&lt;p&gt;&lt;strong&gt;Aes 算法三个特点：&lt;/strong&gt;&lt;br /&gt;
1、密钥。密钥是 AES 算法实现加密和解密的根本。对称加密算法之所以对称，是因为这类算法对明文的加密和解密需要使用同一个密钥。AES 支持三种长度的密钥。分别是：128 位、192 位、256 位。密钥位数越多加密轮数越多、也就越安全，但是也会导致性能的下降。&lt;br /&gt;
2、填充。常见的填充：NoPadding（要求明文必须是 16 字节的整数倍）、PKCS5Padding（如果明文块少于 16 个字节，则再明文末尾补足相应数量的字符）、ISO10126Padding（在明文块末尾补足相应数字的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数）。值得注意的是在 AES 加密的时候使用了某一种填充方式，解密的时候也必须采用相同的填充方式。&lt;br /&gt;
3、模式。常见的模式有：ECB(电子密码本)、CBC(密码块连接)、CTR（计算器模式）、CFB(密码反馈方式) 和 OFB(输出反馈方式)、PCBC(填充密码块链接)。所有工作模式的差别体现在宏观上，即明文块与明文块之间的关联。AES 加密器的内部处理流程都是相同的。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ECB 电子密码本模式是最简单的加密模式，加密前根据加密块的大小（AES 为 128 位）分成若干块，之后将每块使用相同的密钥单独加密，解密同理。&lt;br /&gt;
ECB 因为每块数据的加密是独立的因此加密和解密都可以并行计算。ECB 最大的问题是相同的明文快回被加密成相同的密文，在某些特俗环境并不能提供严格的数据保密性。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CBC 模式又称之为密码分组链接：CBC 模式对于每个待加密的密码块在加密前会先与前一个密码块的密文进行异或然后再用加密器进行加密。显然第一个密码块是没有前一个的密文与之进行异或操作的，所以其采用的是第一个明文块与一个初始化向量（IV）的数据块进行异或操作。&lt;br /&gt;
AES_cbc_encrypt 允许 length 不是 16(128 位)的整数倍，不足的部分会用 0 填充，输出总是 16 的整数倍。完成加密或解密后会更新初始化向量 IV。CBC 模式相比 ECB 有更高的保密性，但由于对每个数据块的加密依赖与前一个数据块的加密所以加密无法并行。与 ECB 一样在加密前需要对数据进行填充，不是很适合对流数据进行加密。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CFB 又称为面反馈模式，其与 ECB、CBC 不同的是 CFB 能够将密文转换为流密文。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;OFB 模式又称输出反馈模式（Output feedback）：OFB 是先用块加密器生成密钥流（Keystream），然后再将密钥流与明文流异或得到密文流，解密是先用块加密器生成密钥流，再将密钥流与密文流异或得到明文，由于异或操作的对称性所以加密和解密的流程是完全一样的。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于填充&lt;/strong&gt;&lt;br /&gt;
需要了解分组加密特性，何为分组加密，在密码学中分组加密又称之为分块加密或者块密码，是一种对称加密算法。它将明文分为多个等长的模块，使用确定的算法和对称密钥对每组分别加密解密。有一个问题，因为 AES 加密算法是会将明文拆分为一个个独立的明文块，那么显然可能会存在最后一个明文块长度达不到标准，如果出现这种情况就需要对明文进行填充处理。&lt;br /&gt;
&lt;strong&gt;常见的填充处理方式&lt;/strong&gt;&lt;br /&gt;
1、NoPadding： 不做任何填充，但是明文必须是指定块长度的整数倍。&lt;br /&gt;
2、PKCS5Padding(默认):如果明文块少于 16 个字节（128bit），在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。&lt;br /&gt;
3、ISO10126Padding:如果明文块少于 16 个字节（128bit），在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;AES 整体关系图&lt;/strong&gt;&lt;br /&gt;
1、把明文按照 128bit 拆分为若干个明文块。&lt;br /&gt;
2、按照选择的填充方式来填充最后一个明文块。&lt;br /&gt;
3、每一个明文块利用 AES 加密器和密钥，加密成密文块。&lt;br /&gt;
4、拼接所有的密文块，成为最终的密文结果。&lt;br /&gt;
&lt;img src=&quot;/img/Aes加密.png&quot; alt=&quot;整体关系图&quot; /&gt;
&lt;strong&gt;AES 加密器剖析&lt;/strong&gt;
AES 不是一次把明文变成密文，而是经过很多轮加密。大致可以分为：&lt;br /&gt;
初始轮 1 次+普通轮 N 次+最终轮 1 次。之前提到 AES 的 key（密钥） 支持三种长度：AES128、AES192、AES256。key 的长度决定轮 AES 加密的轮数。&lt;br /&gt;
出去初始轮，各种 key 长度对应的轮数如下:&lt;br /&gt;
AES128 – 10 轮 – 8 次普通轮&lt;br /&gt;
AES192 – 12 轮 – 10 次普通轮&lt;br /&gt;
AES256 – 14 轮 – 12 次普通轮&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;初始轮只有一个步骤：加轮密钥。&lt;br /&gt;
普通轮有四个步骤：1、字节代替。2、行移位。3、列混淆。4、加轮密钥。&lt;br /&gt;
最终轮有三个步骤：1、字节代替。2、行移位。3、加轮密钥。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;字节代替&lt;/em&gt;&lt;br /&gt;
16 个字节在明文块在每一个处理步骤中都被排列成 4*4 的二维数组。所谓的字节代替就是把明文块的每一个字节都替代成另外一个字节。替代的依据一个被称为 S 盒的 16*16 的二维常量数组。
假设明文块中 a[2][3] = 5A;那么输出值 b[2,3] = S[5][10]。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;行移位&lt;/em&gt;&lt;br /&gt;
二维矩阵，第一行不动。第二行循环左移动 1 个字节。第三行循环左移 2 个字节。第 4 行循环左移 3 个字节。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;列混淆&lt;/em&gt;&lt;br /&gt;
输入数组的每一列要和一个名为修补举证的二维常量数组做矩阵相乘得到对应的输出列。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;加轮密钥&lt;/em&gt;&lt;br /&gt;
128bit 的密钥也被同样排列成 4*4 的矩阵。让输入数组的每一个字节 a[i][j]与密钥对应位置的字节 k[i][j]异或一次，就生成了输出值 b[i,j]。需要注意的是：加密的每一轮所用到的密钥并不是相同的，这里涉及到一个概念：扩展密钥。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;扩展密钥&lt;/em&gt;&lt;br /&gt;
AES 源代码中用长度 4 _ 4 _（10+1） 字节的数组 W 来存储所有轮的密钥。W{0-15}的值等同于原始密钥的值，用于为初始轮做处理。后续每一个元素 W[i]都是由 W[i-4]和 W[i-1]计算而来，直到数组 W 的所有元素都赋值完成。W 数组当中，W{0-15}用于初始轮的处理，W{16-31}用于第 1 轮的处理，W{32-47}用于第 2 轮的处理 ……一直到 W{160-175}用于最终轮（第 10 轮）的处理。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;至此加密流程全部走完。解密的过程就是加密的逆过程不再坠述。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h4&gt;

&lt;p&gt;在前端同事进行联调的时候发现，数据量少的情况，前端是可以对后端的密文进行正常解密的，但是当后端提供的密文很长的时候，前端解密的时候就会出现无法解密的情况。
经过排查发现，因为后端加密采用的是 node 的核心模块中的 crypto，但是前端用的是 crypto-js。最终解决是后端也采用 crypto-js 这个模块进行加密操作。&lt;/p&gt;

&lt;h4 id=&quot;回头看看&quot;&gt;回头看看&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;解答&lt;/strong&gt;&lt;br /&gt;
1、解答：iv 的作用是在 CBC 加密模式的情况下与第一个明文块进行异步操作的。&lt;br /&gt;
2、解答：AES 是一种分组加密标准，每个加密块大小为 128 位，允许的密钥长度为 128、192 和 256 位。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;知识收集&lt;/strong&gt;&lt;br /&gt;
1、http://www.361way.com/aes/5830.html&lt;br /&gt;
2、https://zhuanlan.zhihu.com/p/45155135&lt;br /&gt;
3、https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&lt;br /&gt;
4、https://www.zybuluo.com/coldxiangyu/note/796980&lt;br /&gt;
5、https://blog.csdn.net/Vieri_32/article/details/48345023&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Aug 2019 06:09:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/10/Aes/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/10/Aes/</guid>
        
        <category>AES</category>
        
        
      </item>
    
      <item>
        <title>MongoDB使用整理（Doing）</title>
        <description>&lt;p&gt;MongoDB 是非关系型数据库的典型。官网对它的描述是：基于分布式文件存储的数据库，其拥有高性能、可扩展、易部署、易使用，存储数据非常方便等优势。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;优势：&lt;br /&gt;
1、文档型NoSQL数据库。数据以文档的形式在MongoDB中保存，文档实际就是JSON字符串，JSON字符串容易阅读，且主流的计算机语言对其有很好的支持。&lt;br /&gt;
2、基于文档的灵活的数据模式。相比MySQL，无需使用DDL对表结构进行修改。&lt;br /&gt;
3、强大的索引能力。支持一级、二级、TTL索引和地理位置索引等。&lt;br /&gt;
4、强大的扩展能力。分片机制用于实现业务的水平扩展，每个分片只保留业务的部分数据，并且支持副本集，确保分片上的数据的高可用性。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决什么问题&quot;&gt;解决什么问题&lt;/h2&gt;

&lt;p&gt;1、敏捷迭代的业务，需求变动频繁，数据模型无法确定。&lt;br /&gt;
2、存储的数据格式灵活，不固定 ，或属于半结构化数据。&lt;br /&gt;
3、对数据高可用性有高要求。&lt;br /&gt;
4、需要大量的地理位置查询、文本查询。&lt;br /&gt;
5、无需跨文档或跨表的事物及复杂的join查询支持。（4.0之后支持多文档事物，多文档事物可以理解为关系型数据库的多行事物。）&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容&lt;/h2&gt;

&lt;h4 id=&quot;curd-简诉&quot;&gt;CURD 简诉&lt;/h4&gt;

&lt;p&gt;其查询语法跟 MySQL 的 SQL 是存在很大区别的。个人在刚刚开始写的时候感觉很难记。其实它的查询语法异常简单。后面会想起来感觉所接触到的几个非关系型数据都是这个套路，即查询语句中的条件跟存储的数据的数据结构是一样的，只需要将条件放置到相关位置进行一一对上位即可。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;documents:
[
    {
        name:'want',
        age:23,
        hobby:['chang', 'tiao', 'rap', 'lanqiu'],
        girlfriend: null
    },
    {
        name:'haixing',
        age:23,
        hobby:['game', 'eat', 'study', 'acm'],
        girlfriend: ObjectId(&quot;2323231231&quot;)
    },
    {
        name:'xuejun',
        age:23,
        hobby:['reading', 'study'],
        girlfriend: null
    },
    {
        name:'xidada',
        age:23,
        hobby:['reading', 'game'],
        girlfriend: null
    }
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询的时候比方说要查年龄大于 22 并且喜欢的学习（study）的人。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;db.getCollection.user.find({})。find中的{}就是我们要匹配的文档。
那么我们将条件进行填充即可。
{
    age:{ $gt:22},
    hobby:'study' //因为hobby是数组，也可以这么限定：hobby:{$in:['study']}
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询条件默认是&amp;amp;&amp;amp;的逻辑，如果想用或的逻辑使用 &lt;strong&gt;$or&lt;/strong&gt; 挂到查询对象上。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;$or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;等同与&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中的&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hobby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更、删、增自个查官方文档吧。&lt;/p&gt;

&lt;h4 id=&quot;索引的问题&quot;&gt;索引的问题&lt;/h4&gt;

&lt;p&gt;由于索引是存储在内存(RAM)中,你应该确保该索引的大小不超过内存的限制。
如果索引的大小大于内存的限制，MongoDB 会删除一些索引，这将导致性能下降。&lt;/p&gt;

&lt;p&gt;检测是否使用索引：explain 关键字。&lt;/p&gt;

&lt;p&gt;索引的最大范围：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1、集合中索引不能超过 64 个&lt;/li&gt;
  &lt;li&gt;2、索引名的长度不能超过 128 个字符&lt;/li&gt;
  &lt;li&gt;3、一个复合索引最多可以有 31 个字段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刚刚开始建 schema 的时候没必要过多的索引的，后面有需要再建索引。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;mongoose创建索引：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//_id自带索引&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1为指定按升序创建索引，-1为降序创建索引。&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fieldB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//多字段索引&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可选参数列表：
&lt;img src=&quot;/img/indexOpt.png&quot; alt=&quot;可选参数&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;tips&quot;&gt;tips&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;选至《深入学习MongDB》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1、取最值的方式：a、通过聚合然后使用一些提供的方法拿 b、[推荐使用]对某个字段进行排序然后取第一个。&lt;br /&gt;
2、索引一般用在返回结果总是总体数据的一小部分的时候。一旦返回的数据较大（举例：超过了集合的一半）就不要用索引了。&lt;br /&gt;
3、可以使用 $natural 来禁用掉索引。&lt;br /&gt;
4、建立分级文档加快扫描（实际用的不多感觉）。&lt;br /&gt;
5、AND 型查询，查询条件越苛刻（匹配最少数据量的条件）越放在前面，减少数据量。&lt;br /&gt;
6、OR 型查询，查询条件越宽泛（匹配最多数据量的条件）越放在前面。&lt;br /&gt;
7、在collection在256G之前进行分片&lt;/p&gt;

&lt;h4 id=&quot;聚合&quot;&gt;聚合&lt;/h4&gt;
&lt;h6 id=&quot;关联表&quot;&gt;关联表&lt;/h6&gt;
&lt;p&gt;通过3.2版本的新功能$lookup来进行。&lt;br /&gt;
语法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;{
   $lookup:
     {
       from: &amp;lt;collection to join&amp;gt;, //指定要执行联结的集合
       localField: &amp;lt;field from the input documents&amp;gt;, // 
       foreignField: &amp;lt;field from the documents of the &quot;from&quot; collection&amp;gt;, //指定from文档中的字段
       as: &amp;lt;output array field&amp;gt; //指定要添加到输入文档中的新数组字段的名称。
     }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const res = await models.Xxx.aggregate([
    { $match: query },
    { $group: { _id: '$tags' } },
    { $lookup: { from: 'tags', localField: '_id', foreignField: '_id', as: 'tags' } },
    // 关联后再做筛选
    { $match: { 'tags.name': { $all: tags_arr } } },
    { $project: { _id: 1 } },
]);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你使用的ORM的包是mongoose的话，请使用Query的populate方法。相关使用详情参阅：&lt;a href=&quot;https://mongoosejs.com/docs/api/query.html#query_Query-populate&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;mongodb和关系型数据库的核心区别&quot;&gt;MongoDB和关系型数据库的核心区别&lt;/h4&gt;
&lt;p&gt;核心区别就是：文档模型。&lt;br /&gt;
关系模型需要我们把一个数据对象拆分成许多个单项。然后存到各个相应的表中，需要的时候通过查询将所需要的数据从各个表中查询出来。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MongoDB的文档模式。文档模式存储单位是一个文档，可以支持数组和嵌套文档。在MongoDB中利用富文档的性质，很多时候，关联是一个伪需求，可以通过合理建模来避免。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;文档模型的优点：&lt;br /&gt;
1、效率高。文档模型将数据集中到来一起，在普通机械盘中不需要在额外的移动磁头。&lt;br /&gt;
2、可扩展性强。如果不考虑关联，数据分区分库，水平扩展简单。&lt;br /&gt;
3、动态模式。文档模型支持可变数据模式，不要求每个文档都要有一样的数据结构，对很多异构数据场景支持较好。&lt;br /&gt;
4、模型自然。最为接近对象模型。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;文档模式设计的基本策略：&lt;br /&gt;
一般先考虑内嵌，一般的一对一、一对多关系都可以放在一个文档中使用内嵌进行解决。&lt;br /&gt;
实在不行使用引用，即在主表中存储一个ID值指向另一张表的的ID值，从性能上来说我们一般需要两次以上的查询才能把相关的数据取到。&lt;br /&gt;
更加重要的是MongoDB暂时还不支持跨表的事务，所以对强事务场景需要谨慎使用。（4.0版本发布后MongoDB支持原生的事务操作）&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Aug 2019 06:09:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/09/mongodb/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/09/mongodb/</guid>
        
        <category>数据库</category>
        
        <category>MongoDB</category>
        
        
      </item>
    
      <item>
        <title>Promise、async流程控制库</title>
        <description>&lt;h2 id=&quot;解决什么问题&quot;&gt;解决什么问题&lt;/h2&gt;
&lt;p&gt;  Promise是一种异步编程中流程控制的解决方案之一。它的诞生有利于我们写出更具可读性的代码，解决了回调地狱问题。Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了。&lt;/p&gt;
&lt;h2 id=&quot;内容&quot;&gt;内容&lt;/h2&gt;
&lt;h4 id=&quot;基础知识&quot;&gt;基础知识&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;什么是callback？&lt;/strong&gt;&lt;br /&gt;
  周知在同步编程中一个函数如果想要把函数体内部的处理结果进行返回，那么需要借助return关键字。但是在异步编程中主线程是暂时不会关注一个异步的执行结果的，它会继续的往下走。那么异步操作的结果怎么返回给主线程呢？就是通过callback。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;  Promise的构造函数需要传入一个匿名函数，函数中有两个参数–resolve、reject（实际上这两货就是回调函数）。  Promise构造函数执行时立即调用里面的匿名函数。那么也就是这，程序开始做匿名函数中的工作了，一旦工作做完了（可能成功也可能失败），成功呢需要调用resolve函数将Promise的状态改为fulfilled，失败呢就调用reject函数将Promise的状态改为rejected。如果在这个匿名函数中抛出一个错误那么这个Promise的状态将改为rejected，它的返回值将会被忽略。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promise的几种状态&lt;/strong&gt;&lt;br /&gt;
  三种，分别是：刚刚构造时的准备（pending）、成功时的（fulfilled）、失败时的（rejected）。
状态一旦改变就不会再变动了，这也就是为什么称之为Promise（承诺）。状态的变动的方向是pendding-&amp;gt;fulfilled,pendding-&amp;gt;rejected。这两个方向。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;async流程控制库&lt;/strong&gt;&lt;br /&gt;
常用的方法就是那几个,其他的方法参见文档：&lt;br /&gt;
      async.auto(tasks, cb) 多个任务可能存在依赖关系，有的并行执行有的依次执行&lt;br /&gt;
      async.waterfall(tasks, cb) 多个任务依次执行，且前一个的输出结果作为下一个的输入&lt;br /&gt;
      async.series(tasks, cb) 多个任务依次执行，且任务之间没有数据交换 &lt;br /&gt;
      async.parallel(tasks, cb) 多个函数并行执行&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;
&lt;p&gt;例子1:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeMsArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeMsArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`err`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;思考与总结&quot;&gt;思考与总结&lt;/h4&gt;
&lt;p&gt;理解Promise先整明白callback，而后认识到它的核心思想就是如果这个Promise的状态定下来了，接下来（then）该怎么去做。&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jul 2019 23:56:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/21/promise/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/21/promise/</guid>
        
        <category>async</category>
        
        <category>Promise</category>
        
        
      </item>
    
      <item>
        <title>Redis</title>
        <description>&lt;h2 id=&quot;解决什么问题&quot;&gt;解决什么问题&lt;/h2&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容&lt;/h2&gt;
&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;1、先安装docker
2、搜索镜像
3、下载镜像
4、试用镜像运行一个容器&lt;/p&gt;
&lt;h4 id=&quot;基础知识&quot;&gt;基础知识&lt;/h4&gt;
&lt;p&gt;redis 几种key的数据类型：
    1、字符串
    2、哈希
    3、列表
    4、集合
    5、有序集合&lt;/p&gt;

&lt;h4 id=&quot;哨兵机制&quot;&gt;哨兵机制&lt;/h4&gt;

&lt;h4 id=&quot;发布订阅&quot;&gt;发布订阅&lt;/h4&gt;

&lt;h4 id=&quot;分布式锁&quot;&gt;分布式锁&lt;/h4&gt;

&lt;h4 id=&quot;思考与总结&quot;&gt;思考与总结&lt;/h4&gt;

</description>
        <pubDate>Fri, 14 Jun 2019 03:09:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/14/redis/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/14/redis/</guid>
        
        <category>redis</category>
        
        <category>数据库</category>
        
        
      </item>
    
      <item>
        <title>技术书目笔记</title>
        <description>&lt;h2 id=&quot;开这个的原因&quot;&gt;开这个的原因&lt;/h2&gt;
&lt;p&gt;  温故而知新。内容控制在原先读过的技术书目上。&lt;/p&gt;

&lt;h4 id=&quot;js高级程序设计&quot;&gt;JS高级程序设计&lt;/h4&gt;
&lt;p&gt;变量：&lt;br /&gt;
5中基本类型：Null、Undefined、String、Number、Boolean。注意是类型（首字母大写）&lt;br /&gt;
其中注意：typeof操作符 对 null的结果：[typeof null ==object] [typeof 函数== function] [typeof NaN ==&amp;gt; NaN]&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;对变量进行声明原则是不需要进行初始化的，因为该变量会自动的被赋予undefined。但是显式的初始化仍然是明智的。
因为它有助于我们辨别一个变量到底是没初始化还是没有声明。&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//比如a是一个没有声明的变量&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//那么typeof a ==&amp;gt;undefined&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果a是有声明的而且也进行了显式的初始化&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;逻辑上讲：null值表示空对象指针。这也是typeof null == object的原因。
如果一个变量将来打算用来保存对象的，那么务必将其初始化为null。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boolean&lt;/strong&gt; &lt;br /&gt;
5个false的情况：null,undefined,”“,0,false&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number&lt;/strong&gt; &lt;br /&gt;
浮点数值进行计算精度丢失问题。0.1+0.2==&amp;gt;0.300000000000001&lt;br /&gt;
.1（有效，等同0.1）&lt;br /&gt;
较大较小值可以使用科学计数法进行表示。1.22e5 === 122000&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;数值范围：Number.MIN_VALUE~Number.MAX_VALUE 大多数浏览器的具体范围是：5e-324~1.797e308.超过范围数值将变成Infinity和-Infinity。可使用isFinite()函数判断数值是否在范围内。false为不在范围内。
一旦为数值变成无穷值那么将不在参与下一次的计算。&lt;br /&gt;
NaN（Not a Number）非数值。用来表示本来要返回数值的操作数未返回数值的情况。任何数/0 ==&amp;gt;NaN&lt;br /&gt;
2个特点：任何涉及NaN的操作都将返回NaN.其次NaN跟任何数值都不相等，包括NaN自己。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3个数值转换函数：Number(),parseInt(),parseFloat().&lt;br /&gt;
注意：Number(undefined) === NaN Number(‘’) ===0,Number(null)===0，或者转换字符串不满足数值格式转换结果也是NaN。&lt;br /&gt;
如果是转换的是一个对象，则调用对象的valueOf方法,然后依照规则进行转换，如果转换的结果是NaN，则调用toString()方法。然后再依照那个规则进行转换。不建议使用Number()进行字符串的转换。[先是调用valueOf()不假但是toString()好像有问题]&lt;br /&gt;
使用parseInt()。转换规则：1、忽略前面的空格2、第一个字符，第一个字符不是数字返回NaN.如果是继续查找直至全部字符查找完毕或者遇到非数字字符，返回刚刚检索过的数字字符，并以数值的形式返回。&lt;br /&gt;
parseInt(‘’) ==&amp;gt;NaN parseInt(‘123.4’) ==&amp;gt; 123&lt;br /&gt;
如果第一个字符是数字字符，parseInt()也能识别出各种整数的格式。（8进制【es5之后丧失】、16进制数）&lt;br /&gt;
parseInt(010) ==&amp;gt; 10 (es5之后parseInt方法不在具有解析8进制数的能力，前导0会无效) parseInt(0x1) ==&amp;gt; 16(16进制数)
困惑为了消除parseInt()函数上的困惑，该函数提供了第二个参数：转换时使用的基数(多少进制)。&lt;br /&gt;
parseFloat()函数跟parseInt()函数类似。2点区别：1、parseFloat会始终忽略前导0。2、解析遇到第一个小数点有效遇到第二个小数点无效&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String:&lt;/strong&gt;&lt;br /&gt;
字符串不可变。要改变某个字符串就得删除原先得字符串。&lt;br /&gt;
转换为字符串：1、toString()方法。null和undefined没有此方法。&lt;br /&gt;
数值的toString()可以传递一个基数，用以转换成不同格式。null和undefined没有toString()方法，强项调用该方法会返回这两个值的字面量。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作符&lt;/strong&gt;&lt;br /&gt;
比较操作符：&lt;br /&gt;
数值和数值 比大小&lt;br /&gt;
数值和 数值型字符比较，将数值型字符转为数值 再比较两者的大小&lt;br /&gt;
数值型字符和 数值型字符比较，比较字符编码大小。“23” &amp;lt; “5” 因为：2–&amp;gt;字符编码为50 3–&amp;gt;字符编码为51&lt;br /&gt;
字符和字符 比较 也是比较字符编码大小&lt;br /&gt;
NaN和任何操作数比较都返回false&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;相等操操作符：&lt;br /&gt;
== 和 !=  两个操作符都会强制转换操作数，然后比较他们的相等性。&lt;br /&gt;
如果操作数中有一个是布尔类型，那么将其转为数值，true转为1false转为0，而后进行比较&lt;br /&gt;
如果有一个操作数是对象，另外一个不是那么调用这个对象的valueOf方法得到基本的数值类型再根据之前的比较规则进行比较。&lt;br /&gt;
null和undefined是相等的&lt;br /&gt;
如果有一个操作数是NaN那么相等操作符都将返回false.&lt;br /&gt;
两个对象是一个对象相等操作符才返回true&lt;br /&gt;
===全相等和!==不全等，不会对操作数进行转换其余同相等和不等&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;逗号操作符：&lt;br /&gt;
用于声明：一条语句可以执行多个声明。let a = 3,b = 2,c = 4;&lt;br /&gt;
用于赋值：let a = (1,2,3,4,5);a === 5。因为5是最后一项。此用法不常见。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;break和continue中的一种：&lt;br /&gt;
outermost标签表示外部的for循环。&lt;br /&gt;
内部循环中 的 break 语句带了一个参数:要返回到的标签。添加这个标签的结果将导致 break 语句不仅会退出内 部的 for 语句(即使用变量 j 的循环)，而且也会退出外部的 for 语句(即使用变量 i 的循环)。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;outermost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outermost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//55&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;continue同样也可以和标签一起连用。&lt;br /&gt;
这种情况下，continue 语句会强制继续执行循环——退出内部循环，执行外部循环。当 j 是 5 时，continue 语句执行，而这也就意味着内部循环少执行了 5 次，因此 num 的结果是 95。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;outermost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outermost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//95&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用label标签语句，一定要使用描述性的标签，同时不要使用过多的标签。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;函数：&lt;br /&gt;
return语句也可以不带任何的返回值。函数在停止执行时将返回undefined值。&lt;br /&gt;
js没有重载。同名函数函数名只属于后面那个函数。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;基本类型按值访问、引用类型按引用访问。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;局部变量会在函数执行完立即销毁（实际gc回收不是立即的）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;执行环境与作用域&lt;/strong&gt;&lt;br /&gt;
执行环境（简称环境）定义了变量或函数有权访问的其他数据，决定了他们各自的行为。&lt;br /&gt;
每个执行环境都有一个 与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们 编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。&lt;br /&gt;
全局执行环境是最外围的一个执行环境。在 Web 浏览器中，全局执行环境被认为是 window 对象。因 此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完 毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退 出——例如关闭网页或浏览器——时才会被销毁）。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;延长作用域链：&lt;br /&gt;
try-catch语句的catch块/with语句。这两个语句都可以在作用域链的前端加上1个变量对象。&lt;br /&gt;
对 with 语句来说，会将指定的对象添加到 作用域链中。对 catch 语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。&lt;br /&gt;
查询标识符，通过搜索来确认这个标识符实际代表什么。整个搜索过程将一直回溯到全局环境的变量对象。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;&lt;br /&gt;
局部变量只在函数执行过程中存在。具体到浏览器垃圾回收主要有两个策略：&lt;br /&gt;
标记清除和引用计数&lt;br /&gt;
引用计数循环引用问题：&lt;br /&gt;
循环引用指的是对象A中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的 引用.
IE 中有一部分对象并不是原生 JavaScript 对象。例如，其 BOM 和 DOM 中的对象就是 使用 C++以 COM（Component Object Model，组件对象模型）对象的形式实现的，而 COM 对象的垃圾 收集机制采用的就是引用计数策略。因此，即使 IE 的 JavaScript 引擎是使用标记清除策略来实现的，但 JavaScript 访问的 COM 对象依然是基于引用计数策略的。换句话说，只要在 IE 中涉及 COM 对象，就会 存在循环引用的问题。下面这个简单的例子，展示了使用 COM 对象导致的循环引用问题：&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some_element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个例子在一个 DOM 元素（element）与一个原生 JavaScript 对象（myObject）之间创建了循环 引用。其中，变量 myObject 有一个名为 element 的属性指向 element 对象；而变量 element 也有 一个属性名叫 someObject 回指 myObject。由于存在这个循环引用，即使将例子中的 DOM 从页面中 移除，它也永远不会被回收。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;为了避免类似这样的循环引用问题，最好是在不使用它们的时候手工断开原生 JavaScript 对象与 DOM 元素之间的连接。例如，可以使用下面的代码消除前面例子创建的循环引用：&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将变量设置为 null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就 会删除这些值并回收它们占用的内存。
为了解决上述问题，IE9 把 BOM 和 DOM 对象都转换成了真正的 JavaScript 对象。这样，就避免了 两种垃圾收集算法并存导致的问题，也消除了常见的内存泄漏现象。&lt;br /&gt;
优化内存占用的最佳方式，就是为执行 中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为 null 来释放其引用——这个 做法叫做解除引用（dereferencing）。这一做法适用于大多数全局变量和全局对象的属性。解除引用不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便于gc下次运行时将其回收&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引用类型：&lt;/strong&gt;&lt;br /&gt;
对象类型：&lt;br /&gt;
除非必须使用变量来访问属性，否则我们建议使用点表示法。&lt;br /&gt;
Array类型：&lt;br /&gt;
Array的length属性很有特点，它不是只读的。因此，通过设置这个属性，可以从数组的末尾移除项或向数组中添加新项。&lt;br /&gt;
转换方法：&lt;br /&gt;
所有对象都具有 toLocaleString()、toString()和 valueOf()方法。&lt;br /&gt;
使用 join()方法，可以使用不同的分隔符来构建这个字符串。&lt;br /&gt;
栈方法：&lt;br /&gt;
push()入栈，pop()出栈。&lt;br /&gt;
队列方法：&lt;br /&gt;
push()入队列、shift()取出队列的第一项&lt;br /&gt;
unshift() 和 pop()从反方向来模拟队列，即从数组前端添加项从数组末端移除项。&lt;br /&gt;
重排序方法：&lt;br /&gt;
reverse():反转数组 sort()&lt;br /&gt;
迭代方法：&lt;br /&gt;
every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。  &lt;br /&gt;
filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。&lt;br /&gt;&lt;br /&gt;
forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。 &lt;br /&gt;
map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 &lt;br /&gt;
some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。 以上方法都不会修改数组中的包含的值。&lt;br /&gt;
归并方法：&lt;br /&gt;
reduce()和 reduceRight()这两个方法都会迭 代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历 到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;你不知道的js上&quot;&gt;你不知道的js（上）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;&lt;br /&gt;
程序中的一段代码在执行之前会经历三个步骤，这三个步骤统称为编译：&lt;br /&gt;
1、分词/词法分析&lt;br /&gt;
2、解析/语法分析&lt;br /&gt;
3、代码生成&lt;br /&gt;
js代码的编译与其他大部分语言编译是不同的，因为js代码的编译不是发生在构建之前的。&lt;br /&gt;
大部分情况下js代码的编译发生在代码执行的前几微秒的时间内。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作用域、引擎、编译器&lt;/strong&gt;&lt;br /&gt;
引擎负责整个js程序的编译以及执行过程&lt;br /&gt;
编译器负责语法分析以及代码生成&lt;br /&gt;
作用域负责收集并维护所有声明的标识符组成的一系列查询并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;理解var a = 2&lt;/strong&gt;&lt;br /&gt;
1、编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果存在则忽略这个声明，如果否，则会在这个作用域的集合中哦声明一个新的变量，并命名为a.&lt;br /&gt;
2、编译器会为引擎生成运行所需要的代码，这些代码会被用来处理 a=2 这个赋值操作。引擎运行时会访问作用域，在当前作用域是否存在一个a变量，如果存在引擎会使用这个变量，如果否，继续查找该变量。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LHS/RHS&lt;/strong&gt;&lt;br /&gt;
当变量出现在赋值操作的左侧时进行LHS查询，出现在右侧时进行RHS查询。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LHS&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RHS&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;作用域嵌套&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;当一个块或者函数嵌套在另一个块或者函数中的时候会发生作用域的嵌套，因此在当前作用域无法找到某个变量的时候，引擎会向上层嵌套的作用域继续查找，直到找到该变量或抵达最外层的作用域为止。&lt;br /&gt;
值得注意的是：作用域查找会在找到第一个匹配的标识符停止。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;词法作用域&lt;/strong&gt;&lt;br /&gt;
定义在词法阶段的作用域。词法作用域是由人决定的，我们在代码中将某个变量或者块写在哪来决定。大部分情况，词法分析器在处理代码时会保持词法作用域不变。（欺骗词法将会导致性能下降）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;两中欺骗词法的机制：&lt;br /&gt;
1、eval()函数&lt;br /&gt;
该函数接受一个字符串作为参数，并将其内容视为好像在书写时就已经存在于程序中的这个位置的代码。默认情况下，如果eval函数所执行的代码包含一个或者多个声明，就会对它所处的词法作用域进行修改（严格模式下eval()函数有其自己的词法作用域，意味者其中的声明无法修改所在的词法作用域）&lt;br /&gt;
2、with关键字&lt;br /&gt;
它实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3 a被泄漏到全局作用域上了&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如何泄漏的：o2，foo()的作用域和全局作用域都没有找到a这个标识符，因此当a = 2执行时自动创建一个全局变量（非严格模式下）。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数作用域&lt;/strong&gt;&lt;br /&gt;
指属于这个函数的全部变量都可以在整个函数范围内使用以及复用。&lt;br /&gt;
在任意代码段外面添加包装函数，可以将内部变量和函数定义隐藏起来，外部无法访问内部的任何内容。但是引入了一个额外的问题。定义这个函数，函数名污染了所在的作用域，其次必须显示的调用这个函数才可以运行其中的代码。&lt;br /&gt;
解决方法：&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样一改的话，函数会被当作函数表达式而不是函数声明来处理。&lt;br /&gt;
区分函数声明于函数表达式：&lt;br /&gt;
方法：看function出现的位置，如果function是第一个词，那么这就是一个函数的声明。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匿名和具名：&lt;/strong&gt;&lt;br /&gt;
函数表达式可以是匿名的，但是函数声明是不可以忽略函数名的。在js中函数声明匿名好似非法的。&lt;br /&gt;
匿名的缺点：&lt;br /&gt;
    1、栈追踪中不会显示有意义的函数名，使得调试变得困难。&lt;br /&gt;
    2、如果没有函数名，函数引用自身只能通过过期的argument.callee&lt;br /&gt;
    3、匿名函数省略了代码对代码可读性/可理解性很重要的函数名。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IIFE&lt;/strong&gt;&lt;br /&gt;
代表的是立即执行的函数表达式。上面的代码是一种写法。还有一种。(function foo(){…}())&lt;br /&gt;
两种在功能上是一样的，全凭个人喜好选择。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;块级作用域&lt;/strong&gt;&lt;br /&gt;
1、with关键字，with从对象船舰出的作用域仅在with声明中而非外部作用域中有效。&lt;br /&gt;
2、try/catch。es3的时候就规定了try/catch中的catch分句会创建一个块级作用域，其声明的变量仅在catch中有效。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;尽可能用let关键字替代var&lt;br /&gt;
let关键字可以将变量绑定到所在的任意作用域中（通常是{…}内部）。换句话说let为其声明的变量隐式的劫持了所在的块级作用域。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提升&lt;/strong&gt;&lt;br /&gt;
只有声明才会被提升，而赋值或者其他的运行逻辑会留在原地。即便是具名函数表达式，名称标识符在赋值之前也是无法在所在作用域中使用。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//TypeError&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;函数优先：多个重复声明的标识符，函数会首先被提升。&lt;br /&gt;
&lt;strong&gt;闭包：&lt;/strong&gt;&lt;br /&gt;
闭包会组织gc对某个函数执行完的内部作用域进行回收。闭包使得函数在别处被调用的都可以继续访问定义时的词法作用域。
当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模块模式：&lt;/strong&gt;&lt;br /&gt;
1、必须要有外部封闭函数。&lt;br /&gt;
2、封闭函数必须至少返回一个内部函数，这样内部函数才能在私有作用域中形成闭包。&lt;br /&gt;
现代模块机制：本质上都是将这种定义模块的定义封装到一个友好的API中。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;动态作用域：&lt;/strong&gt;&lt;br /&gt;
js中的作用域就是词法作用域。js并不具备动态作用域。&lt;br /&gt;
动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心他们在什么地方调用。作用域链是基于调用栈的，而不是代码中的作用域嵌套。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;块级作用域的替代&lt;/strong&gt;&lt;br /&gt;
1、使用try{}catch(){}.es3开始有的。性能十分糟糕。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;this词法&lt;/strong&gt;&lt;br /&gt;
胖箭头函数的好处：&lt;br /&gt;
1、可以让你少敲几个单词。&lt;br /&gt;
2、箭头函数在涉及this绑定的行为和普通函数的行为完全不一致。它放弃所有普通this绑定的规则，取而代之的是用当前的词法作用域覆盖了this本来的值。&lt;br /&gt;
丢失this绑定：&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coolFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;not awesome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//awesome;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//nowt awesome&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;第二个输出是出乎预期的，因为cool函数丢失了同this的绑定。&lt;/p&gt;

</description>
        <pubDate>Sat, 09 Mar 2019 17:57:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/09/reviewBook/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/09/reviewBook/</guid>
        
        <category>书</category>
        
        <category>回顾基础</category>
        
        
      </item>
    
      <item>
        <title>RabbitMQ的整理</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;  AMQP：提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准,为面向消息的中间件设计。Erlang中的实现便有RabbitMQ。
   正如中文文档开篇所言：消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用，或者将用户设备和数据进行连接．消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶。这就是rabbitMQ能为我们做的工作。&lt;br /&gt;
优势：&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可靠性 RabbitMQ提供了多种技术可以让你在性能和可靠性之间进行权衡。这些技术包括持久性机制、投递确认、发布者证实和高可用性机制。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;灵活的路由 消息在到达队列前是通过交换机进行路由的。RabbitMQ为典型的路由逻辑提供了多种内置交换机类型。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;可视化管理工具 RabbitMQ附带了一个易于使用的可视化管理工具，它可以帮助你监控消息代理的每一个环节。&lt;br /&gt;
…&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;h4 id=&quot;amqp概念&quot;&gt;AMQP概念&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/AMQP.jpg&quot; alt=&quot;基本概念联系图&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装部署&quot;&gt;安装部署&lt;/h4&gt;
&lt;p&gt;建议使用docker进行安装。方便又快捷。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;查询镜像&lt;/code&gt;&lt;br /&gt;
docker serach rabbitmq:management&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;获取镜像&lt;/code&gt;&lt;br /&gt;
docker pull rabbitmq:management&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;运行一个镜像是rabbitmq:management的容器&lt;/code&gt;&lt;br /&gt;
docker run -d -p 5672:5672 -p 15672:15672 –name myrabbitmq rabbitmq:management&lt;br /&gt;
  -d:后台运行容器，并返回容器ID&lt;br /&gt;
  -p:端口映射，格式：主机端口：容器端口&lt;br /&gt;
  –name:为容器指定名称&lt;br /&gt;
  rabbitmq:management:这个是镜像&lt;br /&gt;
  更多参数请查看docker run命令&lt;br /&gt;
&lt;img src=&quot;/img/rabbitmq-no1.jpg&quot; alt=&quot;看下&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;访问下WEB管理界面&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/img/rabbitmq-no2.jpg&quot; alt=&quot;WEB管理界面&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;客户端简单的说明&quot;&gt;客户端简单的说明&lt;/h4&gt;
&lt;!-- 显示当前用户有权访问的所有虚拟主机的对象总数 --&gt;

&lt;h4 id=&quot;队列交换机&quot;&gt;队列、交换机&lt;/h4&gt;

&lt;h4 id=&quot;延时队列&quot;&gt;延时队列&lt;/h4&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
</description>
        <pubDate>Wed, 16 Jan 2019 02:06:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/16/RabbitMQ/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/16/RabbitMQ/</guid>
        
        <category>RabbitMQ</category>
        
        <category>消息队列</category>
        
        
      </item>
    
      <item>
        <title>Docker的整理</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;docker是开发人员和系统管理员使用容器开发、部署和运行应用程序的平台。使用Linux容器部署应用程序称为容器化。容器不是新的，但是它们用于轻松部署应用程序。&lt;br /&gt;
容器化的优势：&lt;br /&gt;
1、灵活，再复杂的应用也可以集装箱化。&lt;br /&gt;
2、轻量级，容器利用并共享主机内核。&lt;br /&gt;
3、可互换，支持即时部署更新和升级。&lt;br /&gt;
4、便携性，我们可以本地构建，部署到云，并在任何地方运行。&lt;br /&gt;
5、可扩展，我们可以增加并自动分发容器副本。&lt;br /&gt;
6、可堆叠，我们可以垂直和即时堆叠服务。&lt;br /&gt;
&lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;h4 id=&quot;概念&quot;&gt;概念&lt;/h4&gt;
&lt;p&gt;镜像：通过运行镜像启动容器，镜像是一个可执行的包，它包含运行应用的所有的内容，包含代码、环境、配置文件等。&lt;br /&gt;
容器：容器是镜像的运行时的实例。可以使用docker ps 查看正在运行的容器列表。&lt;br /&gt;
容器和虚拟机的对比：&lt;br /&gt;
容器在Linux上运行，并于其他容器共享主机内核。它运行一个独立的进程，不占用任何其他的可执行文件的内存，这使得它十分的轻量。
相比之下,虚拟机运行一个完整的“客户”操作系统，通过虚拟机管理程序对主机资源进行虚拟访问。通常，虚拟机提供的环境比大多数应用程序需要的资源多。&lt;br /&gt;
CE社区版、EE企业版量体裁衣咯。前者免费,后者收费，但是更安全，官网有详细叙述。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;安装docker&quot;&gt;安装docker&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;TP&lt;/a&gt; 
根据自己操作系统的不同自己选择安装方式。
&lt;img src=&quot;/img/docker安装.jpg&quot; alt=&quot;看这里&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;镜像加速&quot;&gt;镜像加速&lt;/h4&gt;
&lt;p&gt;dockerhub在墙外面，下镜像很慢。所以…&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;docker常用命令&quot;&gt;docker常用命令&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;版本:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker --versioin 版本信息
docker info docker安装细节,为避免权限错误最好加sudo运行
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;帮助:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker --help
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;镜像:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker pull 拉取镜像，不指定Docker Registry默认Docker Hub
docker image ls/docker iamges  列出所有的镜像
docker system df 镜像体积
docker image prune 删除dangling image
docker image ls imageName 根据仓库名列出镜像
docker image rm imageName/imageId 删除本地镜像
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;容器:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker ps -l 列出最新创建的x个容器
docker ps -n=2 列出最后n个容器
docker container ls 列出正在运行的容器
docker container ls -a/--all 列出所有的容器
docker container ls -aq 列出所有的容器(q安静模式：只返回容器ID)
docker container run 镜像id 从镜像文件生成一个正在运行的容器
docker start containerId 启动某个（containerId）容器
docekr run --restart containerId 重启某个容器
docker run --restart=always containerId 
docker run -it -v /xxx/xx/x:/xx/x -p 4000:80 imageName 
    -it 交互式进入容器 -v磁盘映射(避免频繁地在两个系统中拷贝文件) -p端口映射(把本机4000端口映射到容器的80端口)
docker stop containerName/containerId 退出某个容器（容器名称好像不行）
docker kill containerName/containerId 强制退出某个容器
docker rm containerName/containerId 删除某个容器
docker rm 'docker ps -a -q' 列出所有容器，-q列出所有的容器的ID，然后传递给rm一次删除
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;构建:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker build . 创建镜像使用当前目录作为上下文。大多数情况下最好从空目录(项目目录)开始作为上下文。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;镜像构建&quot;&gt;镜像构建&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;命令：&lt;/strong&gt;
docker build .
-f:指定文件系统中一个Dockerfile的位置
-t:构建成功指定repository和tag&lt;/p&gt;

&lt;p&gt;Dockerfile是一个描述组装镜像步骤的文档。一般而言Dockerfile是存于项目目录下的。特别注意不要将根目录作为PATH路径，因为会导致这次构建操作将磁盘驱动器的全部内容传输到Docker守护进程(daemon)中。也可以通过添加.dockerignore文件来排除某些文件和目录。&lt;br /&gt;
&lt;strong&gt;格式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# Comment
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSTRUCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;官方样例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# Use an official Python runtime as a parent image
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slim&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Set the working directory to /app
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORKDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Copy the current directory contents into the container at /app
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install any needed packages specified in requirements.txt
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trusted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pypi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make port 80 available to the world outside this container
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPOSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Define environment variable
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;World&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Run app.py when the container launches
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile指令解释：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;s&quot;&gt;FROM:Dockerfile第一条语句，其指定了构建镜像的基础镜像。一个合法的Dockerfile必须以FROM开始。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;FROM &amp;lt;image&amp;gt; [AS &amp;lt;name&amp;gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;] [AS &amp;lt;name&amp;gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;FROM &amp;lt;image&amp;gt;[@&amp;lt;digest&amp;gt;] [AS &amp;lt;name&amp;gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN:RUN指令将在当前镜像上的新的layer执行任何命令并提交结果。生成的已提交镜像用于Dockerfile的下一步。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;RUN &amp;lt;command&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CMD:为执行容器提供默认值。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (首选形式)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;CMD command param1 param2 (shell form)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;LABEL:给镜像添加备注信息。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;LABEL &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;MAINTAINER:指定镜像作者。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;MAINTAINER &amp;lt;name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EXPOSE:通知Docker容器在运行时侦听执行的网络端口。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;/&amp;lt;protocol&amp;gt;...]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV:设置环境变量。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ENV &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ADD:从src处复制新文件、目录、远程URL，并将它们添加到dest的镜像文件系统中。&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ADD [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ADD [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] [&quot;&amp;lt;src&amp;gt;&quot;,... &quot;&amp;lt;dest&amp;gt;&quot;] (this form is required for paths containing whitespace)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY:从src处复制新文件、目录、远程URL，并将它们添加到dest的镜像文件系统中。&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENTRYPOINT:允许您配置将作为可执行文件运行的容器&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;VOLUME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR:为Dockerfile中的RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果目录不存在则创建。&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ONBUILD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
</description>
        <pubDate>Wed, 16 Jan 2019 02:06:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/16/Docker/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/16/Docker/</guid>
        
        <category>Docker</category>
        
        <category>容器</category>
        
        
      </item>
    
      <item>
        <title>Neo4j知识梳理</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;   图是一种常见的数据结构，其反映数据所对应元素之间的几何关系和拓扑关系。图数据库是一种非关系型数据库。它应用图形理论存储实体之间的关系信息。最常见例子就是社会网络中人与人之间的关系。关系型数据库用于存储“关系型”数据的效果并不好，其查询复杂、缓慢、超出预期，而图形数据库的独特设计恰恰弥补了这个缺陷。&lt;br /&gt;
   Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。Neo4j也可以被看作是一个高性能的图引擎，该引擎具有成熟数据库的所有特性。程序员工作在一个面向对象的、灵活的网络结构下而不是严格、静态的表中——但是他们可以享受到具备完全的事务特性、企业级的数据库的所有好处。&lt;br /&gt;
  cypher是用于neo4j的查询语言。&lt;br /&gt;
  本文仅对工作中的使用点进行总结，后期会继续更新。可能有些地方有些偏颇。请见谅。&lt;br /&gt;
  ⚠️⚠️⚠️社区版免费，企业版收费。并且企业版费用不低。&lt;a href=&quot;http://neo4j.com.cn/topic/59b0a3f59fe13f5e0a2212b2&quot;&gt;价格参考表&lt;/a&gt;。&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;h4 id=&quot;crud&quot;&gt;CRUD&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;增&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;节点：&lt;/code&gt;&lt;br /&gt;
    create (n:xxx{att:value}) //单节点&lt;br /&gt;
    create (n),(m);//多节点，注意创建多节点的时候自定义变量(前面的n、m是用于捕获结果)不能重复,即create (n),(n);是会报错的。&lt;br /&gt;
    create (n:label1:lable2:label3) //带标签的节点。标签可以用来创建索引，从而有助于优化对节点的查询。标签的命名规则：数字、字母、下划线，首字母不能是数字。&lt;br /&gt;
    create (n:xxx{att1:value1})//创建带属性的节点。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;关系：&lt;/code&gt;&lt;br /&gt;
    create：&lt;br /&gt;
        create (n1:xx)-[r:xxx]-&amp;gt;(n2:x) //创建单关系&lt;br /&gt;
        create (n1:xx)-[r:xxx]-&amp;gt;(n2:x),(n11:xx)-[r1:xxx]-&amp;gt;(n22:x)//创建多关系&lt;br /&gt;
        create ()-[r:xx{att:value}]-()//创建带属性的关系&lt;br /&gt;
        create k = (n1)-[r1:friend{location:’China’}]-&amp;gt;(n2) return k //创建具有节点和联系的全路径&lt;br /&gt;
    create unique:&lt;br /&gt;
        match (n)-[r]-(n1) &lt;br /&gt;
        where n.id = xx&lt;br /&gt;
        create unique (n)-[r1]-(n2:{name:’want’}) &lt;br /&gt;
        return n,r,n1,n2 //创建唯一的节点和联系。create unique语句，这个语句放在match和create这里，对于match上的节点和关系会新建缺省元素。&lt;br /&gt;
    merge:&lt;br /&gt;
        megre (n:xxx{att:value}) Merge好似if-else语句，基本逻辑是先检测merge后面的条件，看看有没有匹配的返回值，如果有则执行on merge分支，如果没有则走on create。&lt;br /&gt;
    create unique与merge区别：Create Unique部分匹配就可以，而Merge则只有整个模式都匹配才创建，否则什么也不做。&lt;br /&gt;
&lt;strong&gt;改&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;更新属性值:&lt;/code&gt;&amp;lt;br
    match (n:xxx{att:value}) set n.att = newValue return n&lt;br /&gt;
    除了create 和 delete 以外其他语句都必须要以return结尾&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;更新标签:&lt;/code&gt;&lt;br /&gt;
    match (n:lable1:label2) set n:newLabel1:newLabel2 return n;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;更改关系:&lt;/code&gt;&lt;br /&gt;
    先删除旧的关系，再建立新的关系。&lt;br /&gt;
&lt;strong&gt;删&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;delete:&lt;/code&gt;&lt;br /&gt;
    不建议使用match (n) delete n （强保护机制，必要要先删除关系再删除节点）&lt;br /&gt;
    而是使用：match (n) detach delete n (弱保护机制)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;remove:专门删除属性、标签&lt;/code&gt;&lt;br /&gt;
    match (n:xxx{att:value}) remove n.att return n;//删除节点的某一个属性&lt;br /&gt;
    match (n) remove n:label//删除某一个标签，注意如果标签有约束，需要先删除约束：DROP CONSTRAINT ON (p:lable) ASSERT p.id IS UNIQUE&lt;br /&gt;
    match (n) where n.id = xxx set n.att = null;//将某个属性设置为null也是删除属性的一种方法。&lt;br /&gt;
&lt;strong&gt;查&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;match(查询)...where:&lt;/code&gt;&lt;br /&gt;
    在match之前可以进行定位用以加快查询速度。&lt;br /&gt;
    常见聚合操作：count、distinct、max、min…&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;标签限定&quot;&gt;标签限定&lt;/h4&gt;
&lt;p&gt;  在version2开始引入对标签的限定。暂时只有unique能用。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;create constraint on (n:MALE) assert n.name is unique;
可以确保name属性是唯一的。
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;模式与模式匹配&quot;&gt;模式与模式匹配&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;节点模式：&lt;br /&gt;
 使用括号进行描述&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;标签模式：&lt;br /&gt;
 增加标签限定，多个标签起到交集作用&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;关系模式&lt;br /&gt;
 match (a:A)-[b:relations]-&amp;gt;(c:C) return a,b,c&lt;br /&gt;
 首先会搜寻两个标签节点，再去这些节点中寻找符合relations关系。&lt;br /&gt;
 双向就不要剪头:match (a:A)-[b:relations]-(c:C) return a,b,c&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;属性模式&lt;br /&gt;
 属性匹配使用的是花括号和键值对，其间使用逗号分隔。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;where：&lt;br /&gt;
where不能单独使用，只能用在match、optionalmatch、start、with的后面，用以进一步过滤模式的数据。&lt;br /&gt;
where从句中使用模式：
5.1. 对于一个集合，如果是空集，那么代表false，非空代表true。可以使用in关键字来进一步限定。(这种做法在数据量大的时候会导致查询速度非常慢，在match之前进行定位可以解决)。=～ 不等于。点号和[]是相等，但是用法讲究。对于[]，其间必须是常量。&lt;br /&gt;
5.2. 使用exists()函数进行属性校验。&lt;br /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; match (x)
 where exists(x.age)
 return x.name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;5.3. 字符串匹配：starts with、ends with、contains&lt;br /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; match (x)
 where x.name starts with &quot;B&quot;
 return x.name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;5.4. 其他从句：&lt;br /&gt;
 5.4.1. order排序(默认是升序，支持混排)&lt;br /&gt;
 5.4.2. limit限制返回数，skip跳过前多少个数据。&lt;br /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; match (n)
 return n
 order by n.age skip 3 limit 3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;5.5. with从句：with的作用就是连接多个查询结果，有点类似linux中的管道的意思。&lt;br /&gt;
5.6. union、union all:&lt;br /&gt;
union的用法与SQL一样，用于连接两个Match，返回结果中剔除了重复记录。但union all功能一样，但不剔除重复记录。&lt;br /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;apoc&quot;&gt;APOC&lt;/h4&gt;
    &lt;p&gt;  APOC是Neo4j 3.3版本推出时正式推荐的一个Java存储过程包，里面包含丰富的函数和过程，作为对Cypher所不能提供的复杂图算法和数据操作功能的补充，APOC还具有使用灵活、高性能等优势。&lt;a href=&quot;https://neo4j-contrib.github.io/neo4j-apoc-procedures/&quot;&gt;传送门&lt;/a&gt;。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;内置函数
 包含 字符串处理、时间戳、统计、日期、科学计数法等。
 &lt;strong&gt;call apoc.meta.stats&lt;/strong&gt;返回当前数据库的一些统计信息。
 &lt;strong&gt;call apoc.meta.graph&lt;/strong&gt;返回当前数据库的一些统计信息。
 &lt;em&gt;*call apoc.text.&lt;/em&gt; **&lt;/li&gt;
      &lt;li&gt;图论算法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中有一个内置函数：apoc.meta.stats 它可以返回当前数据库的一些统计信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/neo4j-apoc.jpg&quot; alt=&quot;cql未优化前&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;最短路径&quot;&gt;最短路径&lt;/h4&gt;
&lt;p&gt;  说到图就绕不开图算法中的寻路算法。其中最为常用的就是最短路算法。neo4J自身提供了一个最短路的函数–shortestPath。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;MATCH (n:person) where n.id IN (某种条件)
WITH collect(n) as nodes
UNWIND nodes as n
UNWIND nodes as m
WITH * WHERE id(n) &amp;lt; id(m)
MATCH path = shortestPath( (n)-[*..%d]-(m) )
RETURN path
附上：两个节点之间的最短路
match (n:account{id:'wxid_zfgv7wjpdajk11'}),(m:account{id:'wxid_htl2hw3r0fbt12'}) match p=shortestPath((n)-[*]-(m)) return p
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;解释：&lt;br /&gt;
1、match满足某种条件的节点。&lt;br /&gt;
2、将所有满足条件的节点放到一个列表中命名为nodes。&lt;br /&gt;
3、使用两个unwind再次将结点列表打散到行，两个unwind的结点是以笛卡尔积的方式返回的，所以这里是两两的任意组合，甚至两个结点相同的组合，实际上我们这里求最短路径1到2和2到1肯定是一样的，所以用id(source) &amp;lt; id(target)来去除一半。&lt;br /&gt;
4、最后是shortestPath函数，里面的source,target就是前面的组合。&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;查询优化&quot;&gt;查询优化&lt;/h4&gt;
&lt;p&gt;  Neo4J在version2引入索引策略，可以对标签进行限制和索引。Neo4J的索引和关系型数据库的定义相类似。主要用于提升节点寻找的性能。对于任何已有数据结构的更改操作，索引自动更新。如果出了错而导致索引处于无效状态，便需要差错并重新生成它们。Cypher查询会自动使用索引，Cypher有一个查询计划器和查询优化器，可以对查询进行评估并尝试尽全力依据选索引择最短执行时间。&lt;br /&gt;
查看索引:&lt;br /&gt;
    1、：schema（查看索引和约束）&lt;br /&gt;
    2、CALL db.indexes YIELD description, label, properties;&lt;br /&gt;
创建索引:&lt;br /&gt;
    create index on :lable(attName)&lt;br /&gt;
删除索引:&lt;br /&gt;
    delete index on :label(attName)&lt;br /&gt;
索引使用:&lt;br /&gt;
    默认是自动使用的。 一旦索引建立，随后但凡在where从句中出现具有索引的属性时，不论是简单的等值比较还是其他条件，索引的使用都是自动的。
    但是也可以显式的指定索引的使用方式–using从句,using从句中是可以在单一查询中提供多个索引项来给cypher查询优化器提供索引提示。&lt;br /&gt;
附：约束&lt;br /&gt;
    查看约束情况：&lt;br /&gt;
    CALL db.constraints&lt;br /&gt;
    建约束&lt;br /&gt;
    CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE&lt;br /&gt;
    注意：Adding the unique constraint will implicitly add an index on that property. If the constraint is dropped, but the index is still needed, the index will have to be created explicitly.–截取至官方文档。唯一约束会自动创建索引。删除约束后需手动创建该索引。&lt;br /&gt;
    删约束：&lt;br /&gt;
    DROP CONSTRAINT ON (book:Book) ASSERT book.isbn IS UNIQUE&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;match (n:label)&amp;lt;br&amp;gt;
using index n:label(attName)&amp;lt;br&amp;gt;
where n.attName = attValue&amp;lt;br&amp;gt;
return n&amp;lt;br&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用scan给Cypher Query Planner先扫描所有标签然后再执行后续的过滤，这种做法的结果意味着优秀的性能，毕竟使用标签本身可以不必考虑那些不必要的数据。这种做法的性能是较好的。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;match (n:label)&amp;lt;br&amp;gt;
using scan n:label&amp;lt;br&amp;gt;
where n.attName = attValue&amp;lt;br&amp;gt;
return n&amp;lt;br&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;理解查询计划:&lt;br /&gt;
    Neo4j使用的都是基于成本的优化器（Cost Based Optimizer，CBO），用于制订精确的执行过程。可以采用如下两种不同的方式了解其内部的工作机制：&lt;br /&gt;
    EXPLAIN：是解释机制，加入该关键字的Cypher语句可以预览执行的过程但并不实际执行，所以也不会产生任何结果。&lt;br /&gt;
    PROFILE：则是画像机制，查询中使用该关键字，不仅能够看到执行计划的详细内容，也可以看到查询的执行结果。&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;优化举例&quot;&gt;优化举例&lt;/h4&gt;
&lt;p&gt;优化前的cql:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;explain
MATCH (n) where n.id IN ['binbin287644658'] 
WITH collect(n) as nodes
UNWIND nodes as n
UNWIND nodes as m
WITH * WHERE id(n) &amp;lt; id(m)
MATCH path = (n)--(m)
RETURN path
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查询速度非常慢，因为节点走了全部节点扫描。原因是match (n)中并没有对标签进行限制。所以我们建立的索引是没有用处的。&lt;br /&gt;
&lt;img src=&quot;/img/neo4jno1.jpg&quot; alt=&quot;cql未优化前&quot; /&gt;
优化后的cql，主要就是使用字符串拼接的方式将具体的节点进行定位。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;explain
MATCH (n1:account {id:'wxid_hrm0cfv931j422'}),(n2:account {id:'binbin287644658'}),(n3:person {id:'320682198612083600'}),(n4:tel {id:'15258868649'}),(n5:device {id:'356996069532389'}),(n6:account {id:'a27563427'}),(n7:account {id:'wxid_q409jxhxvd0q12'}),(n8:account {id:'1004250324'}),(n9:tel {id:'666697734343'}),(n10:account {id:'wxid_xdbjmo94qzlm80'}),(n11:account {id:'lcg476634048'}),(n12:account {id:'ann_48'}),(n13:account {id:'liuxin601248'})WITH [n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13] as nodes
UNWIND nodes as n
UNWIND nodes as m
WITH * WHERE id(n) &amp;lt; id(m)
MATCH path = (n)--(m)
RETURN path
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/neo4jno2.jpg&quot; alt=&quot;cql优化后&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 02:43:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/02/Neo4J/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/02/Neo4J/</guid>
        
        <category>Neo4J</category>
        
        <category>图数据库</category>
        
        <category>数据库</category>
        
        
      </item>
    
      <item>
        <title>搭建基于Swagger的接口文档系统</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;  程序员恐怕很多都是不想写文档的，但是一旦接手他人的项目又是第一时间说：文档呢？这确实是一个很常见的现象。其本质反应的就是书写文档比较耗时，技术人员不想做这种“无用功”与接手他人的项目，技术人员又不想看别人的代码，想通过阅读相关的文档加快上手速度之间的矛盾。&lt;br /&gt;
  个人观点：好的规范一定要尽早养成。个人在刚刚参加工作的时候一开始的做法是在service层上写好接口注释，在注释中将相关的接口的功能、请求参数、响应进行描述。到后来采用Rap进行文档管理，Rap管理的好处就是简单、快速。相关的参数像填表一样的填好，比较简单无脑。但是Rap存在很多不足之处：比如说多人同时编辑存在互斥现象，单一文档同一时间只允许一个用户编辑，亦或是接口不支持在线的请求测试（可能自己不知道）等。而且Rap服务器（私服部署情况除外）是外部的，相关的安全性可能不是很靠得住。个人也没有搭建过公司自用的rap。所以相关的复杂度不是很清楚。但是今天，我想向你推荐的这个东西确实对于搭建一个自用的文档管理系统是很方便、高效的。&lt;br /&gt;
  它就是Swagger。&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;h4 id=&quot;what&quot;&gt;what?&lt;/h4&gt;
&lt;p&gt;  维基百科:Swagger是一个开源软件框架，由大型工具生态系统支持，可帮助开发人员设计，构建，记录和使用RESTful Web服务。 虽然大多数用户通过Swagger UI工具识别Swagger，但Swagger工具集包括对自动化文档，代码生成和测试用例生成的支持。&lt;br /&gt;
  其有三大工具：swagger-ui、swagger-editor、swagger-codegen。swagger-ui是用来显示API文档的，并且它还支持编辑和在线的请求测试。
swagger-editor是一个在线的文档编辑文件工具，有助于整个框架中其他工具的使用，左边编辑右边显示。swagger-codegen,可以根据swagger.json或者swagger.yml文件生成指定的计算机语言指定框架的代码。&lt;/p&gt;

&lt;h4 id=&quot;搭建过程&quot;&gt;搭建过程&lt;/h4&gt;
&lt;p&gt;1、新建一个项目，执行 npm init初始化package.json。&lt;br /&gt;
2、运行npm install swagger -g –save-dev安装Swagger包。&lt;br /&gt;
3、在项目的根目录下新建一个api/swagger/swagger.yaml。并将一下部分复制进来。&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;swagger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2.0&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1.0.0&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xxx后台API&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;接口文档说明以及测试&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;want&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;beursuperman@163.com&quot;&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:5500&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;schemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;consumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application/json&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application/json&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/v1/queryAllGroupMemberChatRecordByChatroomId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;查询群组所有节点之间的聊天记录.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;consumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;param&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;请求体对象&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/definitions/queryAllGroupMemberChatRecordByChatroomIdReq&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A responsed object&lt;/span&gt;      
&lt;span class=&quot;na&quot;&gt;definitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;queryAllGroupMemberChatRecordByChatroomIdReq&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scroll&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chatRoomId&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sort&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5m'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;desc'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;chatRoomId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8477243337@chatroom'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;chat'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4、运行Swagger project edit，此时会自动打开一个swagger编辑窗口，读取的内容就是上一步中的yaml文件&lt;br /&gt;
5、尝试修改编辑窗口的内容，此时右侧会及时修改更新，而且api/swagger/swagger.yaml也会跟着自动更新&lt;br /&gt;
6、下载Swagger-ui，拷贝dist文件夹中的代码到根目录下新建的public文件夹&lt;br /&gt;
7、创建一个express项目，在根目录下新建index.js。代码如下：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//先执行一下npm install&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;opn&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;opn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://localhost:3000/api-doc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;App listening on port 3000!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/api-doc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;8、运行node index.js会启用swagger-ui功能，自动打开api展示页面，但是页面是默认的官网上的东西；&lt;br /&gt;
9、将api/swagger文件夹下的/swagger.yaml文件复制到public文件夹下，打开public/index.html，在脚本中修改url为’./swagger.yaml’,刷新浏览器，即可看到我们的内容&lt;br /&gt;
10、如何将swagger-editor文件的变化实时反馈到swagger-ui上，运行npm install gulp -g –save-dev安装gulp包，在根目录下新建gulpfile.js，代码如下(记得先安装好依赖)：&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js-yaml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 建立api/swagger的swagger.yaml到public下的swagger.yaml联系&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;swagger&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;safeLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./api/swagger/swagger.yaml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./public/swagger.yaml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 实时更新&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./api/swagger/swagger.yaml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;swagger&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;11、再看下package.json中的内容：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;doc-api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;swg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;swagger project edit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;want&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.15.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;swagger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.7.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.9.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;js-yaml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.8.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;opn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.8.5&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;12、新增readme.md添加使用说明：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt; 须知
* npm start 启动项目并跳转接口展示页面 
* swagger project edit 接口文档在线编辑
* npm run gulp 开始同步编辑 （项目一开始就要执行的命令,因为要实时监控api/swagger/swagger.yaml的编辑变动）
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;效果图&quot;&gt;效果图&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;API编就页面&lt;/strong&gt;
&lt;img src=&quot;/img/swagger-editor.jpg&quot; alt=&quot;编辑页面&quot; /&gt;
&lt;strong&gt;API展示页面&lt;/strong&gt;
&lt;img src=&quot;/img/swagger-ui.jpg&quot; alt=&quot;展示页面&quot; /&gt;
&lt;strong&gt;API在线测试页面&lt;/strong&gt;
&lt;img src=&quot;/img/swagger-test.jpg&quot; alt=&quot;测试页面&quot; /&gt;
&lt;strong&gt;API在线测试响应&lt;/strong&gt;
&lt;img src=&quot;/img/swagger-result.jpg&quot; alt=&quot;测试页面&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;期间遇到的问题&quot;&gt;期间遇到的问题：&lt;/h4&gt;
&lt;p&gt;1、跨域问题。这个问题发生在swagger-ui中进行接口测试的时候。出现这个问题,谷歌并询问了宝哥,确认是跨域导致的，所以设置相关的跨域访问进行解决。但是通过查看Network发现又一个OPTION请求每次404？&lt;br /&gt;
&lt;img src=&quot;/img/cors.jpg&quot; alt=&quot;报错&quot; /&gt;
预检(OPTION)请求产生的大概率原因：&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Get、Head、Post方法以外的请求方法&lt;/li&gt;
  &lt;li&gt;如果是POST请求,Content-Type取这三个值以外的值：
    &lt;ul&gt;
      &lt;li&gt;application/x-www-form-urlencoded&lt;/li&gt;
      &lt;li&gt;multipart/form-data&lt;/li&gt;
      &lt;li&gt;text/plain
那么很明显，consumes的值为application/json肯定是要发送预检请求(OPTION)的。那么如何处理。我暂时的做法是在项目中放掉OPTION请求，一旦预检请求没有响应那么后续的请求是不会发送的。
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;app.use (req, res, next)-&amp;gt;
res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT, GET, POST, DELETE, OPTIONS&quot;);
res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials&quot;);
res.header(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);
if req.method == 'OPTIONS'
 res.send(200)
else 
 next()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2、yaml语法
注意我这书写的格式OAS2的格式。别把OAS3的格式就往上写。相关的语法书写参考官方文档。
&lt;a href=&quot;https://swagger.io/docs/specification/describing-request-body/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;搭建参考：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26741562&quot;&gt;必至&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/05/swagger4APIDocument/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/05/swagger4APIDocument/</guid>
        
        <category>Swagger</category>
        
        <category>文档管理</category>
        
        
      </item>
    
  </channel>
</rss>
